# -*- encoding: utf8 -*-

from __future__ import absolute_import, division, print_function

import HTMLParser

import xmlwitch
import os
from datetime import datetime
from os.path import expanduser

from spyne import AnyXml, Application, ServiceBase, rpc, Fault
from spyne.const.http import HTTP_200
from spyne.error import InvalidCredentialsError
from spyne.protocol.soap import Soap11
from spyne.server.http import HttpTransportContext
from spyne.server.wsgi import WsgiApplication

from ..mdx.tools.config_file_parser import ConfigParser
from ..services.models import DiscoverRequest
from ..services.models import ExecuteRequest, Session
from .xmla_discover_tools import XmlaDiscoverTools
from .xmla_execute_tools import XmlaExecuteTools
from .xmla_execute_xsds import execute_xsd


class XmlaSoap11(Soap11):
    def create_in_document(self, ctx, charset=None):
        if isinstance(ctx.transport, HttpTransportContext):
            http_verb = ctx.transport.get_request_method()
            if http_verb == "OPTIONS":
                ctx.transport.resp_headers['allow'] = "POST, OPTIONS"
                ctx.transport.respond(HTTP_200)
                raise Fault("")
        return Soap11.create_in_document(self, ctx, charset)


class XmlaProviderService(ServiceBase):
    """
    The main class to active soap services between xmla clients and olapy.
    
    IMPORTANT : all xsd and soap responses are written manually (not generated by Spyne lib)
    because Spyne doesn't support encodingStyle and other namespaces required by Excel,
    check it <http://stackoverflow.com/questions/25046837/the-encodingstyle-attribute-is-not-allowed-in-spyne>

    we have to instantiate XmlaDiscoverTools and declare variables
    as class variable so we can access them in Discovery and Execute functions
    this problem is related with Spyne architecture, NO CHOICE
    
    NOTE : some variables and functions names shouldn't respect naming convention here
    because we need to create the xmla response (generated by spyne) with the same variable names,
    and then, xmla requests from excel can be reached
    thus make life easier.
    """

    discover_tools = XmlaDiscoverTools()
    sessio_id = discover_tools.session_id

    @rpc(DiscoverRequest,
         _returns=AnyXml,
         _body_style="bare",
         _out_header=Session,
         _throws=InvalidCredentialsError)
    def Discover(ctx, request):
        """
        The first principle function of xmla protocol.

        :param request: Discover function must take 3 argument ( JUST 3 ! ) RequestType,
            Restrictions and Properties , we encapsulate them in DiscoverRequest object

        :return: Discover response in xmla format

        """
        # ctx is the 'context' parameter used by Spyne
        # (which cause problems when we want to access xmla_provider instantiation variables)
        discover_tools = XmlaProviderService.discover_tools
        ctx.out_header = Session(SessionId=str(XmlaProviderService.sessio_id))

        config_parser = ConfigParser(discover_tools.executer.cube_path)
        if config_parser.xmla_authentication() and ctx.transport.req_env[
                'QUERY_STRING'] != 'admin':

            raise InvalidCredentialsError(
                fault_string='You do not have permission to access this resource',
                fault_object=None)
            # TODO call (labster) login function or create login with token (according to labster db)

        if request.RequestType == "DISCOVER_DATASOURCES":
            return discover_tools.discover_datasources_response()

        elif request.RequestType == "DISCOVER_PROPERTIES":
            return discover_tools.discover_properties_response(request)

        elif request.RequestType == "DISCOVER_SCHEMA_ROWSETS":
            return discover_tools.discover_schema_rowsets_response(request)

        elif request.RequestType == "DISCOVER_LITERALS":
            return discover_tools.discover_literals_response(request)

        elif request.RequestType == "MDSCHEMA_SETS":
            return discover_tools.discover_mdschema_sets_response(request)

        elif request.RequestType == "MDSCHEMA_KPIS":
            return discover_tools.discover_mdschema_kpis_response(request)

        elif request.RequestType == "DBSCHEMA_CATALOGS":
            return discover_tools.discover_dbschema_catalogs_response(request)

        elif request.RequestType == "MDSCHEMA_CUBES":
            return discover_tools.discover_mdschema_cubes_response(request)

        elif request.RequestType == "DBSCHEMA_TABLES":
            return discover_tools.discover_dbschema_tables_response(request)

        elif request.RequestType == "MDSCHEMA_MEASURES":
            return discover_tools.discover_mdschema_measures__response(request)

        elif request.RequestType == "MDSCHEMA_DIMENSIONS":
            return discover_tools.discover_mdschema_dimensions_response(
                request)

        elif request.RequestType == "MDSCHEMA_HIERARCHIES":
            return discover_tools.discover_mdschema_hierarchies_response(
                request)

        # todo back here !!
        elif request.RequestType == "MDSCHEMA_LEVELS":
            return discover_tools.discover_mdschema_levels__response(request)

        elif request.RequestType == "MDSCHEMA_MEASUREGROUPS":
            return discover_tools.discover_mdschema_measuresgroups_response(
                request)

        elif request.RequestType == "MDSCHEMA_MEASUREGROUP_DIMENSIONS":
            return discover_tools.discover_mdschema_measuresgroups_dimensions_response(
                request)

        elif request.RequestType == "MDSCHEMA_PROPERTIES":
            return discover_tools.discover_mdschema_properties_response(
                request)

        elif request.RequestType == "MDSCHEMA_MEMBERS":
            return discover_tools.discover_mdschema_members_response(request)

    # Execute function must take 2 argument ( JUST 2 ! ) Command and Properties
    # we encapsulate them in ExecuteRequest object
    @rpc(ExecuteRequest,
         _returns=AnyXml,
         _body_style="bare",
         _out_header=Session)
    def Execute(ctx, request):
        """
        The second principle function of xmla protocol.

        :param request: Execute function must take 2 argument ( JUST 2 ! ) Command and Properties,
            we encapsulate them in ExecuteRequest object

        :return: Execute response in xml format
        """
        ctx.out_header = Session(SessionId=str(XmlaProviderService.sessio_id))
        if request.Command.Statement == '':
            # check if command contains a query

            xml = xmlwitch.Builder()
            with xml['return']:
                xml.root(xmlns="urn:schemas-microsoft-com:xml-analysis:empty")

            return str(xml)

        elif 'WITH MEMBER' in request.Command.Statement :
            return """
                <return>
                <root xmlns="urn:schemas-microsoft-com:xml-analysis:mddataset" 
                xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                    <xs:schema elementFormDefault="qualified" 
                    targetNamespace="urn:schemas-microsoft-com:xml-analysis:mddataset" 
                    xmlns="urn:schemas-microsoft-com:xml-analysis:mddataset" 
                    xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <xs:complexType name="MemberType">
                            <xs:sequence>
                                <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##targetNamespace" 
                                processContents="skip"/>
                            </xs:sequence>
                            <xs:attribute name="Hierarchy" type="xs:string"/>
                        </xs:complexType>
                        <xs:complexType name="PropType">
                            <xs:sequence>
                                <xs:element minOccurs="0" name="Default"/>
                            </xs:sequence>
                            <xs:attribute name="name" type="xs:string" use="required"/>
                            <xs:attribute name="type" type="xs:QName"/>
                        </xs:complexType>
                        <xs:complexType name="TupleType">
                            <xs:sequence>
                                <xs:element maxOccurs="unbounded" name="Member" type="MemberType"/>
                            </xs:sequence>
                        </xs:complexType>
                        <xs:complexType name="MembersType">
                            <xs:sequence>
                                <xs:element maxOccurs="unbounded" minOccurs="0" name="Member" type="MemberType"/>
                            </xs:sequence>
                            <xs:attribute name="Hierarchy" type="xs:string" use="required"/>
                        </xs:complexType>
                        <xs:complexType name="TuplesType">
                            <xs:sequence>
                                <xs:element maxOccurs="unbounded" minOccurs="0" name="Tuple" type="TupleType"/>
                            </xs:sequence>
                        </xs:complexType>
                        <xs:group name="SetType">
                            <xs:choice>
                                <xs:element name="Members" type="MembersType"/>
                                <xs:element name="Tuples" type="TuplesType"/>
                                <xs:element name="CrossProduct" type="SetListType"/>
                                <xs:element name="Union">
                                    <xs:complexType>
                                        <xs:group maxOccurs="unbounded" minOccurs="0" ref="SetType"/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:choice>
                        </xs:group>
                        <xs:complexType name="SetListType">
                            <xs:group maxOccurs="unbounded" minOccurs="0" ref="SetType"/>
                            <xs:attribute name="Size" type="xs:unsignedInt"/>
                        </xs:complexType>
                        <xs:complexType name="OlapInfo">
                            <xs:sequence>
                                <xs:element name="CubeInfo">
                                    <xs:complexType>
                                        <xs:sequence>
                                            <xs:element maxOccurs="unbounded" name="Cube">
                                                <xs:complexType>
                                                    <xs:sequence>
                                                        <xs:element name="CubeName" type="xs:string"/>
                                                        <xs:element minOccurs="0" name="LastDataUpdate" type="xs:dateTime"/>
                                                        <xs:element minOccurs="0" name="LastSchemaUpdate" type="xs:dateTime"/>
                                                    </xs:sequence>
                                                </xs:complexType>
                                            </xs:element>
                                        </xs:sequence>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="AxesInfo">
                                    <xs:complexType>
                                        <xs:sequence>
                                            <xs:element maxOccurs="unbounded" name="AxisInfo">
                                                <xs:complexType>
                                                    <xs:sequence>
                                                        <xs:element maxOccurs="unbounded" minOccurs="0" name="HierarchyInfo">
                                                            <xs:complexType>
                                                                <xs:sequence>
                                                                    <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##targetNamespace" processContents="skip"/>
                                                                </xs:sequence>
                                                                <xs:attribute name="name" type="xs:string" use="required"/>
                                                            </xs:complexType>
                                                        </xs:element>
                                                    </xs:sequence>
                                                    <xs:attribute name="name" type="xs:string"/>
                                                </xs:complexType>
                                            </xs:element>
                                        </xs:sequence>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="CellInfo">
                                    <xs:complexType>
                                        <xs:choice maxOccurs="unbounded" minOccurs="0">
                                            <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##targetNamespace" processContents="skip"/>
                                        </xs:choice>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                        <xs:complexType name="Axes">
                            <xs:sequence>
                                <xs:element maxOccurs="unbounded" name="Axis">
                                    <xs:complexType>
                                        <xs:group maxOccurs="unbounded" minOccurs="0" ref="SetType"/>
                                        <xs:attribute name="name" type="xs:string"/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                        <xs:complexType name="CellData">
                            <xs:sequence>
                                <xs:element maxOccurs="unbounded" minOccurs="0" name="Cell">
                                    <xs:complexType>
                                        <xs:sequence>
                                            <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##targetNamespace" processContents="skip"/>
                                        </xs:sequence>
                                        <xs:attribute name="CellOrdinal" type="xs:unsignedInt" use="required"/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                        <xs:element name="root">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:any minOccurs="0" namespace="http://www.w3.org/2001/XMLSchema" processContents="strict"/>
                                    <xs:element minOccurs="0" name="OlapInfo" type="OlapInfo"/>
                                    <xs:element minOccurs="0" name="Axes" type="Axes"/>
                                    <xs:element minOccurs="0" name="CellData" type="CellData"/>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:schema>
                    <OlapInfo>
                        <CubeInfo>
                            <Cube>
                                <CubeName>Sales</CubeName>
                                <LastDataUpdate xmlns="http://schemas.microsoft.com/analysisservices/2003/engine">2017-07-26T13:08:48</LastDataUpdate>
                                <LastSchemaUpdate xmlns="http://schemas.microsoft.com/analysisservices/2003/engine">2017-07-26T13:08:48</LastSchemaUpdate>
                            </Cube>
                        </CubeInfo>
                        <AxesInfo>
                            <AxisInfo name="Axis0">
                                <HierarchyInfo name="[Measures]">
                                    <UName name="[Measures].[MEMBER_UNIQUE_NAME]" type="xsd:string"/>
                                    <Caption name="[Measures].[MEMBER_CAPTION]" type="xsd:string"/>
                                    <LName name="[Measures].[LEVEL_UNIQUE_NAME]" type="xsd:string"/>
                                    <LNum name="[Measures].[LEVEL_NUMBER]" type="xsd:int"/>
                                    <DisplayInfo name="[Measures].[DISPLAY_INFO]" type="xsd:unsignedInt"/>
                                </HierarchyInfo>
                            </AxisInfo>
                            
                            
                            <AxisInfo name="SlicerAxis">
                            
                                <HierarchyInfo name="[Time].[Time]">
                                    <UName name="[Time].[Time].[MEMBER_UNIQUE_NAME]" type="xsd:string"/>
                                    <Caption name="[Time].[Time].[MEMBER_CAPTION]" type="xsd:string"/>
                                    <LName name="[Time].[Time].[LEVEL_UNIQUE_NAME]" type="xsd:string"/>
                                    <LNum name="[Time].[Time].[LEVEL_NUMBER]" type="xsd:int"/>
                                    <DisplayInfo name="[Time].[Time].[DISPLAY_INFO]" type="xsd:unsignedInt"/>
                                </HierarchyInfo>
                                <HierarchyInfo name="[Geography].[Geography]">
                                    <UName name="[Geography].[Geography].[MEMBER_UNIQUE_NAME]" type="xsd:string"/>
                                    <Caption name="[Geography].[Geography].[MEMBER_CAPTION]" type="xsd:string"/>
                                    <LName name="[Geography].[Geography].[LEVEL_UNIQUE_NAME]" type="xsd:string"/>
                                    <LNum name="[Geography].[Geography].[LEVEL_NUMBER]" type="xsd:int"/>
                                    <DisplayInfo name="[Geography].[Geography].[DISPLAY_INFO]" type="xsd:unsignedInt"/>
                                  </HierarchyInfo>
    
                                <HierarchyInfo name="[Product].[Product]">
                                        <UName name="[Product].[Product].[MEMBER_UNIQUE_NAME]" type="xsd:string"/>
                                        <Caption name="[Product].[Product].[MEMBER_CAPTION]" type="xsd:string"/>
                                        <LName name="[Product].[Product].[LEVEL_UNIQUE_NAME]" type="xsd:string"/>
                                        <LNum name="[Product].[Product].[LEVEL_NUMBER]" type="xsd:int"/>
                                        <DisplayInfo name="[Product].[Product].[DISPLAY_INFO]" type="xsd:unsignedInt"/>
                                </HierarchyInfo>
                            
                            </AxisInfo>
                            
                        </AxesInfo>
                        <CellInfo>
                            <Value name="VALUE"/>
                        </CellInfo>
                    </OlapInfo>
                    <Axes>
                        <Axis name="Axis0">
                            <Tuples>
                                <Tuple>
                                    <Member Hierarchy="[Measures]">
                                        <UName>[Measures].[XL_SD0]</UName>
                                        <Caption>XL_SD0</Caption>
                                        <LName>[Measures]</LName>
                                        <LNum>0</LNum>
                                        <DisplayInfo>0</DisplayInfo>
                                    </Member>
                                </Tuple>
                                <Tuple>
                                    <Member Hierarchy="[Measures]">
                                        <UName>[Measures].[XL_SD1]</UName>
                                        <Caption>XL_SD1</Caption>
                                        <LName>[Measures]</LName>
                                        <LNum>0</LNum>
                                        <DisplayInfo>0</DisplayInfo>
                                    </Member>
                                </Tuple>
                                <Tuple>
                                    <Member Hierarchy="[Measures]">
                                        <UName>[Measures].[XL_SD2]</UName>
                                        <Caption>XL_SD2</Caption>
                                        <LName>[Measures]</LName>
                                        <LNum>0</LNum>
                                        <DisplayInfo>0</DisplayInfo>
                                    </Member>
                                </Tuple>
                            </Tuples>
                        </Axis>
                        <Axis name="SlicerAxis">
                            <Tuples>
                                <Tuple>
                                
                                    <Member Hierarchy="[Product].[Product]">
                                        <UName>[Product].[Product].[Company].[Crazy Development]</UName>
                                        <Caption>Crazy Development</Caption>
                                        <LName>[Product].[Product].[Company]</LName>
                                        <LNum>0</LNum>
                                        <DisplayInfo>2</DisplayInfo>
                                    </Member>
                                    
                                    <Member Hierarchy="[Time].[Time]">
                                        <UName>[Time].[Time].[Year].[2010]</UName>
                                        <Caption>2010</Caption>
                                        <LName>[Time].[Time].[Year]</LName>
                                        <LNum>0</LNum>
                                        <DisplayInfo>2</DisplayInfo>
                                    </Member>
                                    <Member Hierarchy="[Geography].[Geography]">
                                        <UName>[Geography].[Geography].[Continent].[America]</UName>
                                        <Caption>America</Caption>
                                        <LName>[Geography].[Geography].[Continent]</LName>
                                        <LNum>0</LNum>
                                        <DisplayInfo>2</DisplayInfo>
                                    </Member>
                                
                                </Tuple>
                            </Tuples>
                        </Axis>
                    </Axes>
                    <CellData>
                        <Cell CellOrdinal="0">
                            <Value>[Product].[Product].[Company].[Crazy Development]</Value>
                        </Cell>
                        <Cell CellOrdinal="1">
                            <Value>Crazy Development</Value>
                        </Cell>
                        <Cell CellOrdinal="2">
                            <Value>[Product].[Product].[Company]</Value>
                        </Cell>
                    </CellData>
                </root>
            </return>
            """
        else:
            XmlaProviderService.discover_tools.change_catalogue(
                request.Properties.PropertyList.Catalog)
            executer = XmlaProviderService.discover_tools.executer
            executer.mdx_query = request.Command.Statement
            df = executer.execute_mdx()
            xmla_tools = XmlaExecuteTools(executer)

            xml = xmlwitch.Builder()
            with xml['return']:
                with xml.root(
                        execute_xsd,
                        xmlns="urn:schemas-microsoft-com:xml-analysis:mddataset",
                        **{
                            'xmlns:xsd': 'http://www.w3.org/2001/XMLSchema',
                            'xmlns:xsi':
                            'http://www.w3.org/2001/XMLSchema-instance'
                        }):
                    with xml.OlapInfo(xmla_tools.generate_cell_info()):
                        with xml.CubeInfo:
                            with xml.Cube:
                                xml.CubeName('Sales')
                                xml.LastDataUpdate(
                                    datetime.now().strftime(
                                        '%Y-%m-%dT%H:%M:%S'),
                                    xmlns="http://schemas.microsoft.com/analysisservices/2003/engine"
                                )
                                xml.LastSchemaUpdate(
                                    datetime.now().strftime(
                                        '%Y-%m-%dT%H:%M:%S'),
                                    xmlns="http://schemas.microsoft.com/analysisservices/2003/engine"
                                )

                        xml.AxesInfo(
                            xmla_tools.generate_axes_info(df),
                            xmla_tools.generate_axes_info_slicer(df))

                    xml.Axes(
                        xmla_tools.generate_xs0(df),
                        xmla_tools.generate_slicer_axis(df))

                    xml.CellData(xmla_tools.generate_cell_data(df))

            html_parser = HTMLParser.HTMLParser()
            xml = html_parser.unescape(str(xml)).replace('&', '&amp;')

            return xml


application = Application(
    [XmlaProviderService],
    'urn:schemas-microsoft-com:xml-analysis',
    in_protocol=XmlaSoap11(validator='soft'),
    out_protocol=XmlaSoap11(validator='soft'))

# validator='soft' or nothing, this is important because spyne doesn't support encodingStyle until now !!!!

wsgi_application = WsgiApplication(application)


def start_server(host='0.0.0.0', port=8000, write_on_file=False):
    """
    Start the xmla server.

    :param write_on_file:
     - False -> server logs will be displayed on console
     - True  -> server logs will be saved in file (~/olapy-data/logs)

    :return: server instance
    """
    import logging

    from wsgiref.simple_server import make_server

    # log to the console
    # logging.basicConfig(level=logging.DEBUG")
    # log to the file
    # TODO FIX it with os
    if write_on_file:
        home_directory = expanduser("~")
        if not os.path.isdir(
                os.path.join(home_directory, 'olapy-data', 'logs')):
            os.makedirs(os.path.join(home_directory, 'olapy-data', 'logs'))
        logging.basicConfig(
            level=logging.DEBUG,
            filename=os.path.join(home_directory, 'olapy-data', 'logs',
                                  'xmla.log'))
    else:
        logging.basicConfig(level=logging.DEBUG)
    logging.getLogger('spyne.protocol.xml').setLevel(logging.DEBUG)
    logging.info("listening to http://127.0.0.1:8000/xmla")
    logging.info("wsdl is at: http://localhost:8000/xmla?wsdl")
    server = make_server(host, port, wsgi_application)
    server.serve_forever()


if __name__ == '__main__':
    start_server(write_on_file=True)
