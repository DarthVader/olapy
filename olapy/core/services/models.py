# -*- encoding: utf8 -*-
"""
Models to construct xmla responses with Spyne
"""

from __future__ import absolute_import, division, print_function, \
    unicode_literals

# from spyne import ComplexModel, Integer, Unicode, XmlAttribute

# NOTE : I didn't respect python naming convention here
# because we need to create the xmla response (generated by spyne)
# with the same variable names, so xmla requests from excel can be reached.


class Tuple(object):
    """Tuple description (used by spyne)."""

    def __init__(
            self,
            Hierarchy,
            UName,
            Caption,
            LName,
            LNum,
            DisplayInfo,
            PARENT_UNIQUE_NAME,
            HIERARCHY_UNIQUE_NAME,
            Value,
    ):
        self.hierarchy = Hierarchy
        self.uname = UName
        self.caption = Caption
        self.lname = LName
        self.lnum = LNum
        self.display_info = DisplayInfo
        self.parent_unique_name = PARENT_UNIQUE_NAME
        self.hierarchy_unique_name = HIERARCHY_UNIQUE_NAME
        self.value = Value

    def __str__(self):
        return """
        Hierarchy : {}
        UName : {}
        Caption : {}
        LName : {}
        LNum : {}
        DisplayInfo : {}
        PARENT_UNIQUE_NAME : {}
        HIERARCHY_UNIQUE_NAME : {}
        Value : {}
        """.format(
            self.hierarchy,
            self.uname,
            self.caption,
            self.lname,
            self.lnum,
            self.display_info,
            self.parent_unique_name,
            self.hierarchy_unique_name,
            self.value,
        )


class Property():
    """Property description (used by spyne)."""
    def __init__(self, **kwargs):
        self.__dict__ = kwargs

    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
    # _type_info = {
    #     "LocaleIdentifier": str,
    #     "Format": str,
    #     "Catalog": str,
    #     "Content": str,
    #     "DataSourceInfo": str,
    #     "Password": str,
    #     "StateSupport": str,
    #     "Timeout": str,
    #     "ProviderVersion": str,
    #     "BASE_CUBE_NAME": str,
    #     "AxisFormat": str,
    #     "BeginRange": str,
    #     "EndRange": str,
    #     "MDXSupport": str,
    #     "ProviderName": str,
    #     "UserName": str,
    # }


class Restriction():
    """Restriction description (used by spyne)."""

    def __init__(self, **kwargs):
        self.__dict__ = kwargs

    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
    # _type_info = kwargs
    # _type_info = {
    #     "CATALOG_NAME": str,
    #     "SCHEMA_NAME": str,
    #     "CUBE_NAME": str,
    #     "MEMBER_UNIQUE_NAME": str,
    #     "DIMENSION_UNIQUE_NAME": str,
    #     "HIERARCHY_UNIQUE_NAME": str,
    #     "LEVEL_UNIQUE_NAME": str,
    #     "TREE_OP": int,
    #     "PropertyName": str,
    #     "SchemaName": str,
    #     "HIERARCHY_VISIBILITY": int,
    #     "MEASURE_VISIBILITY": int,
    #     "PROPERTY_TYPE": int,
    # }


# class Session():
#     """Session description (used by spyne)."""
#
#     __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
#     SessionId = XmlAttribute(str)


class Restrictionlist():
    """Restriction description (used by spyne)."""
    def __init__(self, **kwargs):
        self.__dict__ = kwargs

    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
    # __type_name__ = "Restrictions"
    # RestrictionList = Restriction


class Propertieslist():
    """Properties description (used by spyne)."""
    def __init__(self, **kwargs):
        self.__dict__ = kwargs

    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
    # __type_name__ = "Properties"
    # PropertyList = Property


class Command():
    """Command description (used by spyne)."""
    def __init__(self, **kwargs):
        self.__dict__ = kwargs

    # _type_info = {"Statement": str}


class ExecuteRequest():
    """Execute description (used by spyne)."""
    def __init__(self, **kwargs):
        self.__dict__ = kwargs
    # Command = Command
    # Properties = Propertieslist


class DiscoverRequest():
    """Discover description (used by spyne)."""
    def __init__(self, **kwargs):
        self.__dict__ = kwargs
    # RequestType = str
    # Restrictions = Restrictionlist
    # Properties = Propertieslist
