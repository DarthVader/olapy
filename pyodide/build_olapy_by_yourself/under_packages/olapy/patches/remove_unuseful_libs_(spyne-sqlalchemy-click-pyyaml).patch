Index: olapy/core/mdx/executor/cube_loader_db.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- olapy/core/mdx/executor/cube_loader_db.py	(date 1540467535000)
+++ olapy/core/mdx/executor/cube_loader_db.py	(date 1540468527000)
@@ -6,7 +6,7 @@
 import pandas as pd
 import pandas.io.sql as psql
 from pandas import DataFrame
-from sqlalchemy import inspect
+# from sqlalchemy import inspect
 
 from ..tools.connection import get_dialect_name
 from .cube_loader import CubeLoader
Index: olapy/core/mdx/tools/connection.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- olapy/core/mdx/tools/connection.py	(date 1540467535000)
+++ olapy/core/mdx/tools/connection.py	(date 1540468527000)
@@ -5,7 +5,7 @@
 
 from typing import List, Optional, Text
 
-from sqlalchemy.engine import Engine
+# from sqlalchemy.engine import Engine
 
 
 class Dialect(object):
Index: olapy/core/services/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- olapy/core/services/models.py	(date 1540467535000)
+++ olapy/core/services/models.py	(date 1540468527000)
@@ -6,7 +6,8 @@
 from __future__ import absolute_import, division, print_function, \
     unicode_literals
 
-from spyne import ComplexModel, Integer, Unicode, XmlAttribute
+
+# from spyne import ComplexModel, Integer, Unicode, XmlAttribute
 
 # NOTE : I didn't respect python naming convention here
 # because we need to create the xmla response (generated by spyne)
@@ -17,16 +18,16 @@
     """Tuple description (used by spyne)."""
 
     def __init__(
-            self,
-            Hierarchy,
-            UName,
-            Caption,
-            LName,
-            LNum,
-            DisplayInfo,
-            PARENT_UNIQUE_NAME,
-            HIERARCHY_UNIQUE_NAME,
-            Value,
+        self,
+        Hierarchy,
+        UName,
+        Caption,
+        LName,
+        LNum,
+        DisplayInfo,
+        PARENT_UNIQUE_NAME,
+        HIERARCHY_UNIQUE_NAME,
+        Value,
     ):
         self.hierarchy = Hierarchy
         self.uname = UName
@@ -62,90 +63,114 @@
         )
 
 
-class Property(ComplexModel):
+class Property():
     """Property description (used by spyne)."""
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    _type_info = {
-        "LocaleIdentifier": Unicode,
-        "Format": Unicode,
-        "Catalog": Unicode,
-        "Content": Unicode,
-        "DataSourceInfo": Unicode,
-        "Password": Unicode,
-        "StateSupport": Unicode,
-        "Timeout": Unicode,
-        "ProviderVersion": Unicode,
-        "BASE_CUBE_NAME": Unicode,
-        "AxisFormat": Unicode,
-        "BeginRange": Unicode,
-        "EndRange": Unicode,
-        "MDXSupport": Unicode,
-        "ProviderName": Unicode,
-        "UserName": Unicode,
-    }
+    def __init__(self, *args, **kwargs):
+        self.__dict__ = kwargs
 
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # _type_info = {
+    #     "LocaleIdentifier": Unicode,
+    #     "Format": Unicode,
+    #     "Catalog": Unicode,
+    #     "Content": Unicode,
+    #     "DataSourceInfo": Unicode,
+    #     "Password": Unicode,
+    #     "StateSupport": Unicode,
+    #     "Timeout": Unicode,
+    #     "ProviderVersion": Unicode,
+    #     "BASE_CUBE_NAME": Unicode,
+    #     "AxisFormat": Unicode,
+    #     "BeginRange": Unicode,
+    #     "EndRange": Unicode,
+    #     "MDXSupport": Unicode,
+    #     "ProviderName": Unicode,
+    #     "UserName": Unicode,
+    # }
 
-class Restriction(ComplexModel):
+
+class Restriction():
     """Restriction description (used by spyne)."""
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    _type_info = {
-        "CATALOG_NAME": Unicode,
-        "SCHEMA_NAME": Unicode,
-        "CUBE_NAME": Unicode,
-        "MEMBER_UNIQUE_NAME": Unicode,
-        "DIMENSION_UNIQUE_NAME": Unicode,
-        "HIERARCHY_UNIQUE_NAME": Unicode,
-        "LEVEL_UNIQUE_NAME": Unicode,
-        "TREE_OP": Integer,
-        "PropertyName": Unicode,
-        "SchemaName": Unicode,
-        "HIERARCHY_VISIBILITY": Integer,
-        "MEASURE_VISIBILITY": Integer,
-        "PROPERTY_TYPE": Integer,
-    }
+    def __init__(self, *args, **kwargs):
+        self.__dict__ = kwargs
 
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # _type_info = {
+    #     "CATALOG_NAME": Unicode,
+    #     "SCHEMA_NAME": Unicode,
+    #     "CUBE_NAME": Unicode,
+    #     "MEMBER_UNIQUE_NAME": Unicode,
+    #     "DIMENSION_UNIQUE_NAME": Unicode,
+    #     "HIERARCHY_UNIQUE_NAME": Unicode,
+    #     "LEVEL_UNIQUE_NAME": Unicode,
+    #     "TREE_OP": Integer,
+    #     "PropertyName": Unicode,
+    #     "SchemaName": Unicode,
+    #     "HIERARCHY_VISIBILITY": Integer,
+    #     "MEASURE_VISIBILITY": Integer,
+    #     "PROPERTY_TYPE": Integer,
+    # }
 
-class Session(ComplexModel):
+
+class Session():
     """Session description (used by spyne)."""
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    SessionId = XmlAttribute(Unicode)
+    def __init__(self, *args, **kwargs):
+        self.__dict__ = kwargs
 
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # SessionId = XmlAttribute(Unicode)
 
-class Restrictionlist(ComplexModel):
+
+class Restrictionlist():
     """Restriction description (used by spyne)."""
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    __type_name__ = "Restrictions"
-    RestrictionList = Restriction
+    def __init__(self, *args, **kwargs):
+        self.__dict__ = kwargs
 
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # __type_name__ = "Restrictions"
+    # RestrictionList = Restriction
 
-class Propertieslist(ComplexModel):
+
+class Propertieslist():
     """Properties description (used by spyne)."""
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    __type_name__ = "Properties"
-    PropertyList = Property
+    def __init__(self, *args, **kwargs):
+        self.__dict__ = kwargs
 
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # __type_name__ = "Properties"
+    # PropertyList = Property
 
-class Command(ComplexModel):
+
+class Command():
     """Command description (used by spyne)."""
 
-    _type_info = {"Statement": Unicode}
+    def __init__(self, *args, **kwargs):
+        self.__dict__ = kwargs
 
+    # _type_info = {"Statement": Unicode}
 
-class ExecuteRequest(ComplexModel):
+
+class ExecuteRequest():
     """Execute description (used by spyne)."""
 
-    Command = Command
-    Properties = Propertieslist
+    def __init__(self, *args, **kwargs):
+        self.__dict__ = kwargs
 
+    # Command = Command
+    # Properties = Propertieslist
 
-class DiscoverRequest(ComplexModel):
+
+class DiscoverRequest():
     """Discover description (used by spyne)."""
 
-    RequestType = Unicode
-    Restrictions = Restrictionlist
-    Properties = Propertieslist
+    def __init__(self, *args, **kwargs):
+        self.__dict__ = kwargs
+
+    # RequestType = Unicode
+    # Restrictions = Restrictionlist
+    # Properties = Propertieslist
Index: olapy/core/services/xmla.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- olapy/core/services/xmla.py	(date 1540467535000)
+++ olapy/core/services/xmla.py	(date 1540468527000)
@@ -14,39 +14,39 @@
 from os.path import expanduser, isfile
 from wsgiref.simple_server import make_server
 
-import click
-from spyne import AnyXml, Application, Fault, ServiceBase, rpc
-from spyne.const.http import HTTP_200
-from spyne.error import InvalidCredentialsError
-from spyne.protocol.soap import Soap11
-from spyne.server.http import HttpTransportContext
-from spyne.server.wsgi import WsgiApplication
-from sqlalchemy import create_engine
+# import click
+# from spyne import AnyXml, Application, Fault, ServiceBase, rpc
+# from spyne.const.http import HTTP_200
+# from spyne.error import InvalidCredentialsError
+# from spyne.protocol.soap import Soap11
+# from spyne.server.http import HttpTransportContext
+# from spyne.server.wsgi import WsgiApplication
+# from sqlalchemy import create_engine
 
 from ..mdx.executor.execute import MdxEngine
 from ..mdx.executor.lite_execute import MdxEngineLite
-from ..mdx.tools.config_file_parser import ConfigParser
-from ..mdx.tools.olapy_config_file_parser import DbConfigParser
+# from ..mdx.tools.config_file_parser import ConfigParser
+# from ..mdx.tools.olapy_config_file_parser import DbConfigParser
 from ..services.models import DiscoverRequest, ExecuteRequest, Session
 from .xmla_discover_request_handler import XmlaDiscoverReqHandler
 from .xmla_execute_request_handler import XmlaExecuteReqHandler
 
 
-class XmlaSoap11(Soap11):
-    """XHR does not work over https without this patch"""
-
-    def create_in_document(self, ctx, charset=None):
-        if isinstance(ctx.transport, HttpTransportContext):
-            http_verb = ctx.transport.get_request_method()
-            if http_verb == "OPTIONS":
-                ctx.transport.resp_headers["allow"] = "POST, OPTIONS"
-                ctx.transport.respond(HTTP_200)
-                raise Fault("")
+# class XmlaSoap11(Soap11):
+#     """XHR does not work over https without this patch"""
+#
+#     def create_in_document(self, ctx, charset=None):
+#         if isinstance(ctx.transport, HttpTransportContext):
+#             http_verb = ctx.transport.get_request_method()
+#             if http_verb == "OPTIONS":
+#                 ctx.transport.resp_headers["allow"] = "POST, OPTIONS"
+#                 ctx.transport.respond(HTTP_200)
+#                 raise Fault("")
+#
+#         return Soap11.create_in_document(self, ctx, charset)
 
-        return Soap11.create_in_document(self, ctx, charset)
 
-
-class XmlaProviderService(ServiceBase):
+class XmlaProviderService():
     """
     The main class to activate SOAP services between xmla clients and olapy.
     """
@@ -60,13 +60,13 @@
     # and then, xmla requests from excel can be reached
     # thus make life easier.
 
-    @rpc(
-        DiscoverRequest,
-        _returns=AnyXml,
-        _body_style="bare",
-        _out_header=Session,
-        _throws=InvalidCredentialsError,
-    )
+    # @rpc(
+    #     DiscoverRequest,
+    #     _returns=AnyXml,
+    #     _body_style="bare",
+    #     _out_header=Session,
+    #     _throws=InvalidCredentialsError,
+    # )
     def Discover(ctx, request):
         """The first principle function of xmla protocol.
 
@@ -98,12 +98,12 @@
     # Execute function must take 2 argument ( JUST 2 ! ) Command and Properties
     # we encapsulate them in ExecuteRequest object
 
-    @rpc(
-        ExecuteRequest,
-        _returns=AnyXml,
-        _body_style="bare",
-        _out_header=Session,
-    )
+    # @rpc(
+    #     ExecuteRequest,
+    #     _returns=AnyXml,
+    #     _body_style="bare",
+    #     _out_header=Session,
+    # )
     def Execute(ctx, request):
         """The second principle function of xmla protocol.
 
@@ -129,212 +129,212 @@
         return execute_request_hanlder.generate_response()
 
 
-home_directory = expanduser("~")
-logs_file = os.path.join(home_directory, "olapy-data", "logs", "xmla.log")
-
-
-def get_mdx_engine(
-        cube_config,
-        sql_alchemy_uri,
-        olapy_data,
-        source_type,
-        direct_table_or_file,
-        columns,
-        measures,
-):
-    sqla_engine = None
-    if sql_alchemy_uri:
-        sqla_engine = create_engine(sql_alchemy_uri)
-
-    if direct_table_or_file:
-        executor = MdxEngineLite(
-            direct_table_or_file=direct_table_or_file,
-            source_type=None,
-            db_config=None,
-            cubes_config=None,
-            columns=columns,
-            measures=measures,
-            sqla_engine=sqla_engine,
-        )
-        executor.load_cube(table_or_file=direct_table_or_file)
-    else:
-        executor = MdxEngine(
-            olapy_data_location=olapy_data,
-            source_type=source_type,
-            cube_config=cube_config,
-            sqla_engine=sqla_engine,
-        )
-    return executor
-
-
-def get_spyne_app(discover_request_hanlder, execute_request_hanlder):
-    """
-
-    :param xmla_tools: XmlaDiscoverReqHandler instance
-    :return: spyne  Application
-    """
-    return Application(
-        [XmlaProviderService],
-        "urn:schemas-microsoft-com:xml-analysis",
-        in_protocol=XmlaSoap11(validator="soft"),
-        out_protocol=XmlaSoap11(validator="soft"),
-        config={
-            "discover_request_hanlder": discover_request_hanlder,
-            "execute_request_hanlder": execute_request_hanlder
-        },
-    )
-
-
-def get_wsgi_application(mdx_engine):
-    """
-
-    :param mdx_engine: MdxEngine instance
-    :return: Wsgi Application
-    """
-    discover_request_hanlder = XmlaDiscoverReqHandler(mdx_engine)
-    execute_request_hanlder = XmlaExecuteReqHandler(mdx_engine)
-    application = get_spyne_app(discover_request_hanlder,
-                                execute_request_hanlder)
-
-    # validator='soft' or nothing, this is important because spyne doesn't
-    # support encodingStyle until now !!!!
-
-    return WsgiApplication(application)
-
-
-@click.command()
-@click.option("--host", "-h", default="0.0.0.0", help="Host ip address.")
-@click.option("--port", "-p", default=8000, help="Host port.")
-@click.option(
-    "--write_on_file",
-    "-wf",
-    default=True,
-    help="Write logs into a file or display them into the console. (True : on file)(False : on console)",
-)
-@click.option(
-    "--log_file_path",
-    "-lf",
-    default=logs_file,
-    help="Log file path. DEFAUL : " + logs_file,
-)
-@click.option(
-    "--sql_alchemy_uri",
-    "-sa",
-    default=None,
-    help="SQL Alchemy URI , **DON'T PUT THE DATABASE NAME** ",
-)
-@click.option(
-    "--olapy_data",
-    "-od",
-    default=os.path.join(expanduser("~"), "olapy-data"),
-    help="Olapy Data folder location, Default : ~/olapy-data",
-)
-@click.option(
-    "--source_type",
-    "-st",
-    default="csv",
-    help="Get cubes from where ( db | csv ), DEFAULT : csv",
-)
-@click.option(
-    "--db_config_file",
-    "-dbc",
-    default=os.path.join(home_directory, "olapy-data", "olapy-config.yml"),
-    help="Database configuration file path, DEFAULT : " + os.path.join(
-        home_directory, "olapy-data", "olapy-config.yml"),
-)
-@click.option(
-    "--cube_config_file",
-    "-cbf",
-    default=os.path.join(
-        home_directory,
-        "olapy-data",
-        "cubes",
-        "cubes-config.yml",
-    ),
-    help="Cube config file path, DEFAULT : " + os.path.join(
-        home_directory, "olapy-data", "cubes", "cubes-config.yml"),
-)
-@click.option(
-    "--direct_table_or_file",
-    "-tf",
-    default=None,
-    help="File path or db table name if you want to construct cube from a single file (table)",
-)
-@click.option(
-    "--columns",
-    "-c",
-    default=None,
-    help="To explicitly specify columns if (construct cube from a single file), columns order matters ",
-)
-@click.option(
-    "--measures",
-    "-m",
-    default=None,
-    help="To explicitly specify measures if (construct cube from a single file)",
-)
-def runserver(
-        host,
-        port,
-        write_on_file,
-        log_file_path,
-        sql_alchemy_uri,
-        olapy_data,
-        source_type,
-        db_config_file,
-        cube_config_file,
-        direct_table_or_file,
-        columns,
-        measures,
-):
-    """
-    Start the xmla server.
-    """
-    try:
-        imp.reload(sys)
-        # reload(sys)  # Reload is a hack
-        sys.setdefaultencoding("UTF8")
-    except Exception:
-        pass
-
-    cube_config = None
-    if cube_config_file and isfile(cube_config_file):
-        cube_config_file_parser = ConfigParser()
-        cube_config = cube_config_file_parser.get_cube_config(cube_config_file)
-
-    sqla_uri = None
-    if "db" in source_type:
-        if sql_alchemy_uri:
-            # just uri, and inside XmlaDiscoverReqHandler we gonna to change uri if cube changes and the create_engine
-            sqla_uri = sql_alchemy_uri
-        else:
-            # if uri not passed with params, look up in the olapy-data config file
-            db_config = DbConfigParser()
-            sqla_uri = db_config.get_db_credentials(db_config_file)
-
-    mdx_engine = get_mdx_engine(
-        cube_config=cube_config,
-        sql_alchemy_uri=sqla_uri,
-        olapy_data=olapy_data,
-        source_type=source_type,
-        direct_table_or_file=direct_table_or_file,
-        columns=columns,
-        measures=measures,
-    )
-
-    wsgi_application = get_wsgi_application(mdx_engine)
-
-    # log to the console
-    # logging.basicConfig(level=logging.DEBUG")
-    # log to the file
-    if write_on_file:
-        if not os.path.isdir(
-                os.path.join(home_directory, "olapy-data", "logs"), ):
-            os.makedirs(os.path.join(home_directory, "olapy-data", "logs"))
-        logging.basicConfig(level=logging.DEBUG, filename=log_file_path)
-    else:
-        logging.basicConfig(level=logging.DEBUG)
-    logging.getLogger("spyne.protocol.xml").setLevel(logging.DEBUG)
-    logging.info("listening to http://127.0.0.1:8000/xmla")
-    logging.info("wsdl is at: http://localhost:8000/xmla?wsdl")
-    server = make_server(host, port, wsgi_application)
-    server.serve_forever()
+# home_directory = expanduser("~")
+# logs_file = os.path.join(home_directory, "olapy-data", "logs", "xmla.log")
+#
+#
+# def get_mdx_engine(
+#         cube_config,
+#         sql_alchemy_uri,
+#         olapy_data,
+#         source_type,
+#         direct_table_or_file,
+#         columns,
+#         measures,
+# ):
+#     sqla_engine = None
+#     if sql_alchemy_uri:
+#         sqla_engine = create_engine(sql_alchemy_uri)
+#
+#     if direct_table_or_file:
+#         executor = MdxEngineLite(
+#             direct_table_or_file=direct_table_or_file,
+#             source_type=None,
+#             db_config=None,
+#             cubes_config=None,
+#             columns=columns,
+#             measures=measures,
+#             sqla_engine=sqla_engine,
+#         )
+#         executor.load_cube(table_or_file=direct_table_or_file)
+#     else:
+#         executor = MdxEngine(
+#             olapy_data_location=olapy_data,
+#             source_type=source_type,
+#             cube_config=cube_config,
+#             sqla_engine=sqla_engine,
+#         )
+#     return executor
+#
+#
+# def get_spyne_app(discover_request_hanlder, execute_request_hanlder):
+#     """
+#
+#     :param xmla_tools: XmlaDiscoverReqHandler instance
+#     :return: spyne  Application
+#     """
+#     return Application(
+#         [XmlaProviderService],
+#         "urn:schemas-microsoft-com:xml-analysis",
+#         in_protocol=XmlaSoap11(validator="soft"),
+#         out_protocol=XmlaSoap11(validator="soft"),
+#         config={
+#             "discover_request_hanlder": discover_request_hanlder,
+#             "execute_request_hanlder": execute_request_hanlder
+#         },
+#     )
+#
+#
+# def get_wsgi_application(mdx_engine):
+#     """
+#
+#     :param mdx_engine: MdxEngine instance
+#     :return: Wsgi Application
+#     """
+#     discover_request_hanlder = XmlaDiscoverReqHandler(mdx_engine)
+#     execute_request_hanlder = XmlaExecuteReqHandler(mdx_engine)
+#     application = get_spyne_app(discover_request_hanlder,
+#                                 execute_request_hanlder)
+#
+#     # validator='soft' or nothing, this is important because spyne doesn't
+#     # support encodingStyle until now !!!!
+#
+#     return WsgiApplication(application)
+#
+#
+# @click.command()
+# @click.option("--host", "-h", default="0.0.0.0", help="Host ip address.")
+# @click.option("--port", "-p", default=8000, help="Host port.")
+# @click.option(
+#     "--write_on_file",
+#     "-wf",
+#     default=True,
+#     help="Write logs into a file or display them into the console. (True : on file)(False : on console)",
+# )
+# @click.option(
+#     "--log_file_path",
+#     "-lf",
+#     default=logs_file,
+#     help="Log file path. DEFAUL : " + logs_file,
+# )
+# @click.option(
+#     "--sql_alchemy_uri",
+#     "-sa",
+#     default=None,
+#     help="SQL Alchemy URI , **DON'T PUT THE DATABASE NAME** ",
+# )
+# @click.option(
+#     "--olapy_data",
+#     "-od",
+#     default=os.path.join(expanduser("~"), "olapy-data"),
+#     help="Olapy Data folder location, Default : ~/olapy-data",
+# )
+# @click.option(
+#     "--source_type",
+#     "-st",
+#     default="csv",
+#     help="Get cubes from where ( db | csv ), DEFAULT : csv",
+# )
+# @click.option(
+#     "--db_config_file",
+#     "-dbc",
+#     default=os.path.join(home_directory, "olapy-data", "olapy-config.yml"),
+#     help="Database configuration file path, DEFAULT : " + os.path.join(
+#         home_directory, "olapy-data", "olapy-config.yml"),
+# )
+# @click.option(
+#     "--cube_config_file",
+#     "-cbf",
+#     default=os.path.join(
+#         home_directory,
+#         "olapy-data",
+#         "cubes",
+#         "cubes-config.yml",
+#     ),
+#     help="Cube config file path, DEFAULT : " + os.path.join(
+#         home_directory, "olapy-data", "cubes", "cubes-config.yml"),
+# )
+# @click.option(
+#     "--direct_table_or_file",
+#     "-tf",
+#     default=None,
+#     help="File path or db table name if you want to construct cube from a single file (table)",
+# )
+# @click.option(
+#     "--columns",
+#     "-c",
+#     default=None,
+#     help="To explicitly specify columns if (construct cube from a single file), columns order matters ",
+# )
+# @click.option(
+#     "--measures",
+#     "-m",
+#     default=None,
+#     help="To explicitly specify measures if (construct cube from a single file)",
+# )
+# def runserver(
+#         host,
+#         port,
+#         write_on_file,
+#         log_file_path,
+#         sql_alchemy_uri,
+#         olapy_data,
+#         source_type,
+#         db_config_file,
+#         cube_config_file,
+#         direct_table_or_file,
+#         columns,
+#         measures,
+# ):
+#     """
+#     Start the xmla server.
+#     """
+#     try:
+#         imp.reload(sys)
+#         # reload(sys)  # Reload is a hack
+#         sys.setdefaultencoding("UTF8")
+#     except Exception:
+#         pass
+#
+#     cube_config = None
+#     if cube_config_file and isfile(cube_config_file):
+#         cube_config_file_parser = ConfigParser()
+#         cube_config = cube_config_file_parser.get_cube_config(cube_config_file)
+#
+#     sqla_uri = None
+#     if "db" in source_type:
+#         if sql_alchemy_uri:
+#             # just uri, and inside XmlaDiscoverReqHandler we gonna to change uri if cube changes and the create_engine
+#             sqla_uri = sql_alchemy_uri
+#         else:
+#             # if uri not passed with params, look up in the olapy-data config file
+#             db_config = DbConfigParser()
+#             sqla_uri = db_config.get_db_credentials(db_config_file)
+#
+#     mdx_engine = get_mdx_engine(
+#         cube_config=cube_config,
+#         sql_alchemy_uri=sqla_uri,
+#         olapy_data=olapy_data,
+#         source_type=source_type,
+#         direct_table_or_file=direct_table_or_file,
+#         columns=columns,
+#         measures=measures,
+#     )
+#
+#     wsgi_application = get_wsgi_application(mdx_engine)
+#
+#     # log to the console
+#     # logging.basicConfig(level=logging.DEBUG")
+#     # log to the file
+#     if write_on_file:
+#         if not os.path.isdir(
+#                 os.path.join(home_directory, "olapy-data", "logs"), ):
+#             os.makedirs(os.path.join(home_directory, "olapy-data", "logs"))
+#         logging.basicConfig(level=logging.DEBUG, filename=log_file_path)
+#     else:
+#         logging.basicConfig(level=logging.DEBUG)
+#     logging.getLogger("spyne.protocol.xml").setLevel(logging.DEBUG)
+#     logging.info("listening to http://127.0.0.1:8000/xmla")
+#     logging.info("wsdl is at: http://localhost:8000/xmla?wsdl")
+#     server = make_server(host, port, wsgi_application)
+#     server.serve_forever()
Index: olapy/core/services/xmla_discover_request_handler.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- olapy/core/services/xmla_discover_request_handler.py	(date 1540467535000)
+++ olapy/core/services/xmla_discover_request_handler.py	(date 1540468527000)
@@ -11,7 +11,7 @@
 
 import xmlwitch
 from six.moves.urllib.parse import urlparse
-from sqlalchemy import create_engine
+# from sqlalchemy import create_engine
 
 from ..services.xmla_discover_request_utils import discover_literals_response_rows, \
     discover_schema_rowsets_response_rows
