Index: olapy/core/mdx/executor/execute.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- olapy/core/mdx/executor/execute.py	(revision 8ba335f1b61690b135f215823841fbe4e53a1f53)
+++ olapy/core/mdx/executor/execute.py	(revision fea892ca2fe5ae2a8baadf87dced93a01ed8793a)
@@ -24,7 +24,7 @@
 
 from typing import List, Dict
 
-import attr
+# import attr
 import numpy as np
 import pandas as pd
 from pandas import DataFrame
@@ -36,7 +36,7 @@
 from .cube_loader_db import CubeLoaderDB
 
 
-@attr.s
+# @attr.s
 class MdxEngine(object):
     """The main class for executing a query.
 
@@ -54,21 +54,36 @@
     :param facts:  facts table name, Default **Facts**
 
     """
+    def __init__(self):
+        self.cube = None
+        self.facts = "Facts"
+        self.source_type = "csv"
+        self.parser = Parser()
+        self.csv_files_cubes = []
+        self.db_cubes = []
+        self.sqla_engine = None
+        self.olapy_data_location = os.path.join(os.environ.get("OLAPY_PATH", expanduser("~")), "olapy-data")
+        self.cube_config = None
+        self.tables_loaded = None
+        self.star_schema_dataframe = None
+        self.measures = None
+        self.selected_measures = None
+        self.cubes_folder = "cubes"
 
-    cube = attr.ib(default=None)
-    facts = attr.ib(default="Facts")
-    source_type = attr.ib(default="csv")
-    parser = attr.ib(default=Parser())
-    csv_files_cubes = attr.ib(default=attr.Factory(list))
-    db_cubes = attr.ib(default=attr.Factory(list))
-    sqla_engine = attr.ib(default=None)
-    olapy_data_location = attr.ib(default=os.path.join(os.environ.get("OLAPY_PATH", expanduser("~")), "olapy-data"))
-    cube_config = attr.ib(default=None)
-    tables_loaded = attr.ib(default=None)
-    star_schema_dataframe = attr.ib(default=None)
-    measures = attr.ib(default=None)
-    selected_measures = attr.ib(default=None)
-    cubes_folder = attr.ib(default="cubes")
+    # cube = attr.ib(default=None)
+    # facts = attr.ib(default="Facts")
+    # source_type = attr.ib(default="csv")
+    # parser = attr.ib(default=Parser())
+    # csv_files_cubes = attr.ib(default=attr.Factory(list))
+    # db_cubes = attr.ib(default=attr.Factory(list))
+    # sqla_engine = attr.ib(default=None)
+    # olapy_data_location = attr.ib(default=os.path.join(os.environ.get("OLAPY_PATH", expanduser("~")), "olapy-data"))
+    # cube_config = attr.ib(default=None)
+    # tables_loaded = attr.ib(default=None)
+    # star_schema_dataframe = attr.ib(default=None)
+    # measures = attr.ib(default=None)
+    # selected_measures = attr.ib(default=None)
+    # cubes_folder = attr.ib(default="cubes")
 
     # @olapy_data_location.default
     # def get_default_cubes_directory(self):
Index: olapy/core/mdx/parser/parse.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- olapy/core/mdx/parser/parse.py	(revision 8ba335f1b61690b135f215823841fbe4e53a1f53)
+++ olapy/core/mdx/parser/parse.py	(revision fea892ca2fe5ae2a8baadf87dced93a01ed8793a)
@@ -6,11 +6,13 @@
 from __future__ import absolute_import, division, print_function, \
     unicode_literals
 
-import regex
+# import regex
 
 
 # FIXME: make this regex more readable (split it)
-REGEX = regex.compile(
+import re
+
+REGEX = re.compile(
     "(?u)(\[[(\u4e00-\u9fff)*\w+\d ]+\](\.\[[(\u4e00-\u9fff)*" +
     '\w+\d\.\,\s\(\)\_\-\:"\’\´\€\&\$ ' + "]+\])*\.?((Members)|(\[Q\d\]))?)")
 
@@ -228,7 +230,7 @@
         :return: All groups as list of strings.
 
         """
-        return regex.findall(r"\(([^()]+)\)", self.mdx_query)
+        return re.findall(r"\(([^()]+)\)", self.mdx_query)
 
     def hierarchized_tuples(self):
         # type: () -> bool
Index: olapy/core/services/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- olapy/core/services/models.py	(revision fea892ca2fe5ae2a8baadf87dced93a01ed8793a)
+++ olapy/core/services/models.py	(revision e8017e23f9df1d6e99c13e47a06211913b0d6746)
@@ -6,7 +6,7 @@
 from __future__ import absolute_import, division, print_function, \
     unicode_literals
 
-from spyne import ComplexModel, Integer, Unicode, XmlAttribute
+# from spyne import ComplexModel, Integer, Unicode, XmlAttribute
 
 # NOTE : I didn't respect python naming convention here
 # because we need to create the xmla response (generated by spyne)
@@ -62,90 +62,104 @@
         )
 
 
-class Property(ComplexModel):
+class Property():
     """Property description (used by spyne)."""
+    def __init__(self, **kwargs):
+        self.__dict__ = kwargs
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    _type_info = {
-        "LocaleIdentifier": Unicode,
-        "Format": Unicode,
-        "Catalog": Unicode,
-        "Content": Unicode,
-        "DataSourceInfo": Unicode,
-        "Password": Unicode,
-        "StateSupport": Unicode,
-        "Timeout": Unicode,
-        "ProviderVersion": Unicode,
-        "BASE_CUBE_NAME": Unicode,
-        "AxisFormat": Unicode,
-        "BeginRange": Unicode,
-        "EndRange": Unicode,
-        "MDXSupport": Unicode,
-        "ProviderName": Unicode,
-        "UserName": Unicode,
-    }
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # _type_info = {
+    #     "LocaleIdentifier": str,
+    #     "Format": str,
+    #     "Catalog": str,
+    #     "Content": str,
+    #     "DataSourceInfo": str,
+    #     "Password": str,
+    #     "StateSupport": str,
+    #     "Timeout": str,
+    #     "ProviderVersion": str,
+    #     "BASE_CUBE_NAME": str,
+    #     "AxisFormat": str,
+    #     "BeginRange": str,
+    #     "EndRange": str,
+    #     "MDXSupport": str,
+    #     "ProviderName": str,
+    #     "UserName": str,
+    # }
 
 
-class Restriction(ComplexModel):
+class Restriction():
     """Restriction description (used by spyne)."""
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    _type_info = {
-        "CATALOG_NAME": Unicode,
-        "SCHEMA_NAME": Unicode,
-        "CUBE_NAME": Unicode,
-        "MEMBER_UNIQUE_NAME": Unicode,
-        "DIMENSION_UNIQUE_NAME": Unicode,
-        "HIERARCHY_UNIQUE_NAME": Unicode,
-        "LEVEL_UNIQUE_NAME": Unicode,
-        "TREE_OP": Integer,
-        "PropertyName": Unicode,
-        "SchemaName": Unicode,
-        "HIERARCHY_VISIBILITY": Integer,
-        "MEASURE_VISIBILITY": Integer,
-        "PROPERTY_TYPE": Integer,
-    }
+    def __init__(self, **kwargs):
+        self.__dict__ = kwargs
 
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # _type_info = kwargs
+    # _type_info = {
+    #     "CATALOG_NAME": str,
+    #     "SCHEMA_NAME": str,
+    #     "CUBE_NAME": str,
+    #     "MEMBER_UNIQUE_NAME": str,
+    #     "DIMENSION_UNIQUE_NAME": str,
+    #     "HIERARCHY_UNIQUE_NAME": str,
+    #     "LEVEL_UNIQUE_NAME": str,
+    #     "TREE_OP": int,
+    #     "PropertyName": str,
+    #     "SchemaName": str,
+    #     "HIERARCHY_VISIBILITY": int,
+    #     "MEASURE_VISIBILITY": int,
+    #     "PROPERTY_TYPE": int,
+    # }
 
-class Session(ComplexModel):
-    """Session description (used by spyne)."""
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    SessionId = XmlAttribute(Unicode)
+# class Session():
+#     """Session description (used by spyne)."""
+#
+#     __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+#     SessionId = XmlAttribute(str)
 
 
-class Restrictionlist(ComplexModel):
+class Restrictionlist():
     """Restriction description (used by spyne)."""
+    def __init__(self, **kwargs):
+        self.__dict__ = kwargs
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    __type_name__ = "Restrictions"
-    RestrictionList = Restriction
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # __type_name__ = "Restrictions"
+    # RestrictionList = Restriction
 
 
-class Propertieslist(ComplexModel):
+class Propertieslist():
     """Properties description (used by spyne)."""
+    def __init__(self, **kwargs):
+        self.__dict__ = kwargs
 
-    __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
-    __type_name__ = "Properties"
-    PropertyList = Property
+    # __namespace__ = "urn:schemas-microsoft-com:xml-analysis"
+    # __type_name__ = "Properties"
+    # PropertyList = Property
 
 
-class Command(ComplexModel):
+class Command():
     """Command description (used by spyne)."""
+    def __init__(self, **kwargs):
+        self.__dict__ = kwargs
 
-    _type_info = {"Statement": Unicode}
+    # _type_info = {"Statement": str}
 
 
-class ExecuteRequest(ComplexModel):
+class ExecuteRequest():
     """Execute description (used by spyne)."""
+    def __init__(self, **kwargs):
+        self.__dict__ = kwargs
+    # Command = Command
+    # Properties = Propertieslist
 
-    Command = Command
-    Properties = Propertieslist
 
-
-class DiscoverRequest(ComplexModel):
+class DiscoverRequest():
     """Discover description (used by spyne)."""
-
-    RequestType = Unicode
-    Restrictions = Restrictionlist
-    Properties = Propertieslist
+    def __init__(self, **kwargs):
+        self.__dict__ = kwargs
+    # RequestType = str
+    # Restrictions = Restrictionlist
+    # Properties = Propertieslist
